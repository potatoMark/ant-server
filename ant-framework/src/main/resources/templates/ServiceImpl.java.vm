package ${package}.${table.moduleName}.service.impl;

import com.baomidou.mybatisplus.core.conditions.query.QueryWrapper;
import com.baomidou.mybatisplus.extension.plugins.pagination.Page;
import com.framework.common.utils.PageUtils;
import com.framework.common.utils.PojoUtils;
import com.framework.common.utils.RequestUtils;
import ${package}.${table.moduleName}.pojo.${table.className};
import ${package}.${table.moduleName}.vo.${table.className}VO;
import ${package}.${table.moduleName}.service.I${table.className}Service;
import ${package}.${table.moduleName}.dao.${table.className}Dao;
import org.apache.commons.lang3.StringUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import java.util.List;

/**
 * <p>
 * ${table.tableComment} 服务实现类
 * </p>
 *
 * @author ${table.author}
 * @email ${table.email}
 * @since ${table.createDate}
 */
@Service
public class ${table.className}ServiceImpl extends com.baomidou.mybatisplus.extension.service.impl.ServiceImpl<${table.className}Dao, ${table.className}> implements I${table.className}Service {

    @Autowired
    ${table.className}Dao ${table.classname}Dao;

    @Override
    public List<${table.className}> get${table.className}s() {
        return ${table.classname}Dao.selectList(null);
    }

    @Override
    public PageUtils queryPage(RequestUtils params) {
        ${table.className}VO ${table.classname}VO = (${table.className}VO)params.getCondition();
        Page<${table.className}> page = (Page<${table.className}>)${table.classname}Dao.selectPage(PageUtils.instance(params.getPage()),new QueryWrapper<${table.className}>()
            #foreach($column in $columns)
                #if($column.attrname != $pk.attrname)
                #if($column.dataType == 'String')
                .like(StringUtils.isNotBlank(${table.classname}VO.get${column.attrName}()),"${column.columnName}",${table.classname}VO.get${column.attrName}())
                #else
                .like(${table.classname}VO.get${column.attrName}() != null,"${column.columnName}",${table.classname}VO.get${column.attrName}())
                #end
                #end
            #end
        );
        return new PageUtils(page);
    }

    @Override
    @Transactional(rollbackFor = Exception.class)
    public int delete${table.className}s(List<${pk.dataType}> ${table.classname}${pk.attrName}s) {


        #if($pk.attrName == 'Id')
            return ${table.classname}Dao.deleteBatchIds(${table.classname}${pk.attrName}s);
        #else
            ${table.classname}${pk.attrName}s.forEach(item->{
                ${table.classname}Dao.delete(new QueryWrapper<${table.className}>().eq("${pk.columnName}",item));
            });
            return 0;
        #end


    }

    @Override
    @Transactional(rollbackFor = Exception.class)
    public int save${table.className}(${table.className} ${table.classname}) {
        PojoUtils.changeDate(${table.classname});
        #if($pk.attrName == 'Id')
            if (${table.classname}.getId() != null) {
                int rst = ${table.classname}Dao.updateById(${table.classname});
                return rst;
            } else {
                int rst = ${table.classname}Dao.insert(${table.classname});
                return rst;
            }
        #else
            int rst = ${table.classname}Dao.insert(${table.classname});
            return rst;
        #end

    }

    @Override
    @Transactional(rollbackFor = Exception.class)
    public ${table.className} get${table.className}(${pk.dataType} ${pk.attrname}) {

        #if($pk.attrName == 'Id')
            return ${table.classname}Dao.selectById(${pk.attrname});
        #else
            return ${table.classname}Dao.selectOne(new QueryWrapper<${table.className}>().eq("${pk.columnName}",${pk.attrname}));
        #end


    }

    @Override
    public List<${table.className}> get${table.className}sByCondition(${table.className}VO ${table.classname}VO) {

        return ${table.classname}Dao.selectList(new QueryWrapper<${table.className}>()
        #foreach($column in $columns)
            #if($column.attrname != $pk.attrname)
            #if($column.dataType == 'String')
            .like(StringUtils.isNotBlank(${table.classname}VO.get${column.attrName}()),"${column.columnName}",${table.classname}VO.get${column.attrName}())
            #else
            .like(${table.classname}VO.get${column.attrName}() != null,"${column.columnName}",${table.classname}VO.get${column.attrName}())
            #end
            #end
        #end
        );
    }
}
